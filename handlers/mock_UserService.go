// Code generated by mockery v2.51.1. DO NOT EDIT.

package handlers

import (
	bytes "bytes"
	context "context"

	mock "github.com/stretchr/testify/mock"

	services "github.com/jmarren/deepfried/services"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetFollowers provides a mock function with given fields: username
func (_m *MockUserService) GetFollowers(username string) []*services.UserWithPhoto {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []*services.UserWithPhoto
	if rf, ok := ret.Get(0).(func(string) []*services.UserWithPhoto); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.UserWithPhoto)
		}
	}

	return r0
}

// MockUserService_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type MockUserService_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - username string
func (_e *MockUserService_Expecter) GetFollowers(username interface{}) *MockUserService_GetFollowers_Call {
	return &MockUserService_GetFollowers_Call{Call: _e.mock.On("GetFollowers", username)}
}

func (_c *MockUserService_GetFollowers_Call) Run(run func(username string)) *MockUserService_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetFollowers_Call) Return(_a0 []*services.UserWithPhoto) *MockUserService_GetFollowers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetFollowers_Call) RunAndReturn(run func(string) []*services.UserWithPhoto) *MockUserService_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowing provides a mock function with given fields: username
func (_m *MockUserService) GetFollowing(username string) []*services.UserWithPhoto {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowing")
	}

	var r0 []*services.UserWithPhoto
	if rf, ok := ret.Get(0).(func(string) []*services.UserWithPhoto); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.UserWithPhoto)
		}
	}

	return r0
}

// MockUserService_GetFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowing'
type MockUserService_GetFollowing_Call struct {
	*mock.Call
}

// GetFollowing is a helper method to define mock.On call
//   - username string
func (_e *MockUserService_Expecter) GetFollowing(username interface{}) *MockUserService_GetFollowing_Call {
	return &MockUserService_GetFollowing_Call{Call: _e.mock.On("GetFollowing", username)}
}

func (_c *MockUserService_GetFollowing_Call) Run(run func(username string)) *MockUserService_GetFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetFollowing_Call) Return(_a0 []*services.UserWithPhoto) *MockUserService_GetFollowing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetFollowing_Call) RunAndReturn(run func(string) []*services.UserWithPhoto) *MockUserService_GetFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// GetFromCtx provides a mock function with no fields
func (_m *MockUserService) GetFromCtx() (*services.User, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFromCtx")
	}

	var r0 *services.User
	var r1 bool
	if rf, ok := ret.Get(0).(func() (*services.User, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *services.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.User)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockUserService_GetFromCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFromCtx'
type MockUserService_GetFromCtx_Call struct {
	*mock.Call
}

// GetFromCtx is a helper method to define mock.On call
func (_e *MockUserService_Expecter) GetFromCtx() *MockUserService_GetFromCtx_Call {
	return &MockUserService_GetFromCtx_Call{Call: _e.mock.On("GetFromCtx")}
}

func (_c *MockUserService_GetFromCtx_Call) Run(run func()) *MockUserService_GetFromCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_GetFromCtx_Call) Return(_a0 *services.User, _a1 bool) *MockUserService_GetFromCtx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetFromCtx_Call) RunAndReturn(run func() (*services.User, bool)) *MockUserService_GetFromCtx_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotifications provides a mock function with no fields
func (_m *MockUserService) GetNotifications() []*services.FollowNotification {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotifications")
	}

	var r0 []*services.FollowNotification
	if rf, ok := ret.Get(0).(func() []*services.FollowNotification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.FollowNotification)
		}
	}

	return r0
}

// MockUserService_GetNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotifications'
type MockUserService_GetNotifications_Call struct {
	*mock.Call
}

// GetNotifications is a helper method to define mock.On call
func (_e *MockUserService_Expecter) GetNotifications() *MockUserService_GetNotifications_Call {
	return &MockUserService_GetNotifications_Call{Call: _e.mock.On("GetNotifications")}
}

func (_c *MockUserService_GetNotifications_Call) Run(run func()) *MockUserService_GetNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_GetNotifications_Call) Return(_a0 []*services.FollowNotification) *MockUserService_GetNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetNotifications_Call) RunAndReturn(run func() []*services.FollowNotification) *MockUserService_GetNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfilePhotoFromCtx provides a mock function with no fields
func (_m *MockUserService) GetProfilePhotoFromCtx() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProfilePhotoFromCtx")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUserService_GetProfilePhotoFromCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfilePhotoFromCtx'
type MockUserService_GetProfilePhotoFromCtx_Call struct {
	*mock.Call
}

// GetProfilePhotoFromCtx is a helper method to define mock.On call
func (_e *MockUserService_Expecter) GetProfilePhotoFromCtx() *MockUserService_GetProfilePhotoFromCtx_Call {
	return &MockUserService_GetProfilePhotoFromCtx_Call{Call: _e.mock.On("GetProfilePhotoFromCtx")}
}

func (_c *MockUserService_GetProfilePhotoFromCtx_Call) Run(run func()) *MockUserService_GetProfilePhotoFromCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_GetProfilePhotoFromCtx_Call) Return(_a0 string) *MockUserService_GetProfilePhotoFromCtx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetProfilePhotoFromCtx_Call) RunAndReturn(run func() string) *MockUserService_GetProfilePhotoFromCtx_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *MockUserService) GetUserByUsername(username string) *services.User {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *services.User
	if rf, ok := ret.Get(0).(func(string) *services.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.User)
		}
	}

	return r0
}

// MockUserService_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserService_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockUserService_Expecter) GetUserByUsername(username interface{}) *MockUserService_GetUserByUsername_Call {
	return &MockUserService_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockUserService_GetUserByUsername_Call) Run(run func(username string)) *MockUserService_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByUsername_Call) Return(_a0 *services.User) *MockUserService_GetUserByUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetUserByUsername_Call) RunAndReturn(run func(string) *services.User) *MockUserService_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProfile provides a mock function with given fields: username
func (_m *MockUserService) GetUserProfile(username string) *services.UserProfile {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 *services.UserProfile
	if rf, ok := ret.Get(0).(func(string) *services.UserProfile); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.UserProfile)
		}
	}

	return r0
}

// MockUserService_GetUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfile'
type MockUserService_GetUserProfile_Call struct {
	*mock.Call
}

// GetUserProfile is a helper method to define mock.On call
//   - username string
func (_e *MockUserService_Expecter) GetUserProfile(username interface{}) *MockUserService_GetUserProfile_Call {
	return &MockUserService_GetUserProfile_Call{Call: _e.mock.On("GetUserProfile", username)}
}

func (_c *MockUserService_GetUserProfile_Call) Run(run func(username string)) *MockUserService_GetUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserProfile_Call) Return(_a0 *services.UserProfile) *MockUserService_GetUserProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_GetUserProfile_Call) RunAndReturn(run func(string) *services.UserProfile) *MockUserService_GetUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserAdmin provides a mock function with no fields
func (_m *MockUserService) IsUserAdmin() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsUserAdmin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockUserService_IsUserAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserAdmin'
type MockUserService_IsUserAdmin_Call struct {
	*mock.Call
}

// IsUserAdmin is a helper method to define mock.On call
func (_e *MockUserService_Expecter) IsUserAdmin() *MockUserService_IsUserAdmin_Call {
	return &MockUserService_IsUserAdmin_Call{Call: _e.mock.On("IsUserAdmin")}
}

func (_c *MockUserService_IsUserAdmin_Call) Run(run func()) *MockUserService_IsUserAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_IsUserAdmin_Call) Return(_a0 bool) *MockUserService_IsUserAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_IsUserAdmin_Call) RunAndReturn(run func() bool) *MockUserService_IsUserAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// MarkFollowNotficationSeen provides a mock function with no fields
func (_m *MockUserService) MarkFollowNotficationSeen() {
	_m.Called()
}

// MockUserService_MarkFollowNotficationSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkFollowNotficationSeen'
type MockUserService_MarkFollowNotficationSeen_Call struct {
	*mock.Call
}

// MarkFollowNotficationSeen is a helper method to define mock.On call
func (_e *MockUserService_Expecter) MarkFollowNotficationSeen() *MockUserService_MarkFollowNotficationSeen_Call {
	return &MockUserService_MarkFollowNotficationSeen_Call{Call: _e.mock.On("MarkFollowNotficationSeen")}
}

func (_c *MockUserService_MarkFollowNotficationSeen_Call) Run(run func()) *MockUserService_MarkFollowNotficationSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_MarkFollowNotficationSeen_Call) Return() *MockUserService_MarkFollowNotficationSeen_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserService_MarkFollowNotficationSeen_Call) RunAndReturn(run func()) *MockUserService_MarkFollowNotficationSeen_Call {
	_c.Run(run)
	return _c
}

// SetUserInCtx provides a mock function with given fields: cognitoId
func (_m *MockUserService) SetUserInCtx(cognitoId string) context.Context {
	ret := _m.Called(cognitoId)

	if len(ret) == 0 {
		panic("no return value specified for SetUserInCtx")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(string) context.Context); ok {
		r0 = rf(cognitoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockUserService_SetUserInCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserInCtx'
type MockUserService_SetUserInCtx_Call struct {
	*mock.Call
}

// SetUserInCtx is a helper method to define mock.On call
//   - cognitoId string
func (_e *MockUserService_Expecter) SetUserInCtx(cognitoId interface{}) *MockUserService_SetUserInCtx_Call {
	return &MockUserService_SetUserInCtx_Call{Call: _e.mock.On("SetUserInCtx", cognitoId)}
}

func (_c *MockUserService_SetUserInCtx_Call) Run(run func(cognitoId string)) *MockUserService_SetUserInCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_SetUserInCtx_Call) Return(_a0 context.Context) *MockUserService_SetUserInCtx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_SetUserInCtx_Call) RunAndReturn(run func(string) context.Context) *MockUserService_SetUserInCtx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: newUsername, newBio, newProfilePhoto, filetype
func (_m *MockUserService) UpdateProfile(newUsername string, newBio string, newProfilePhoto *bytes.Buffer, filetype string) error {
	ret := _m.Called(newUsername, newBio, newProfilePhoto, filetype)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *bytes.Buffer, string) error); ok {
		r0 = rf(newUsername, newBio, newProfilePhoto, filetype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockUserService_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - newUsername string
//   - newBio string
//   - newProfilePhoto *bytes.Buffer
//   - filetype string
func (_e *MockUserService_Expecter) UpdateProfile(newUsername interface{}, newBio interface{}, newProfilePhoto interface{}, filetype interface{}) *MockUserService_UpdateProfile_Call {
	return &MockUserService_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", newUsername, newBio, newProfilePhoto, filetype)}
}

func (_c *MockUserService_UpdateProfile_Call) Run(run func(newUsername string, newBio string, newProfilePhoto *bytes.Buffer, filetype string)) *MockUserService_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*bytes.Buffer), args[3].(string))
	})
	return _c
}

func (_c *MockUserService_UpdateProfile_Call) Return(_a0 error) *MockUserService_UpdateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_UpdateProfile_Call) RunAndReturn(run func(string, string, *bytes.Buffer, string) error) *MockUserService_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsernameInCtx provides a mock function with given fields: newUsername
func (_m *MockUserService) UpdateUsernameInCtx(newUsername string) context.Context {
	ret := _m.Called(newUsername)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsernameInCtx")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(string) context.Context); ok {
		r0 = rf(newUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockUserService_UpdateUsernameInCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsernameInCtx'
type MockUserService_UpdateUsernameInCtx_Call struct {
	*mock.Call
}

// UpdateUsernameInCtx is a helper method to define mock.On call
//   - newUsername string
func (_e *MockUserService_Expecter) UpdateUsernameInCtx(newUsername interface{}) *MockUserService_UpdateUsernameInCtx_Call {
	return &MockUserService_UpdateUsernameInCtx_Call{Call: _e.mock.On("UpdateUsernameInCtx", newUsername)}
}

func (_c *MockUserService_UpdateUsernameInCtx_Call) Run(run func(newUsername string)) *MockUserService_UpdateUsernameInCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_UpdateUsernameInCtx_Call) Return(_a0 context.Context) *MockUserService_UpdateUsernameInCtx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_UpdateUsernameInCtx_Call) RunAndReturn(run func(string) context.Context) *MockUserService_UpdateUsernameInCtx_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyHeader provides a mock function with given fields: authHeader
func (_m *MockUserService) VerifyHeader(authHeader string) (bool, string) {
	ret := _m.Called(authHeader)

	if len(ret) == 0 {
		panic("no return value specified for VerifyHeader")
	}

	var r0 bool
	var r1 string
	if rf, ok := ret.Get(0).(func(string) (bool, string)); ok {
		return rf(authHeader)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(authHeader)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(authHeader)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockUserService_VerifyHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyHeader'
type MockUserService_VerifyHeader_Call struct {
	*mock.Call
}

// VerifyHeader is a helper method to define mock.On call
//   - authHeader string
func (_e *MockUserService_Expecter) VerifyHeader(authHeader interface{}) *MockUserService_VerifyHeader_Call {
	return &MockUserService_VerifyHeader_Call{Call: _e.mock.On("VerifyHeader", authHeader)}
}

func (_c *MockUserService_VerifyHeader_Call) Run(run func(authHeader string)) *MockUserService_VerifyHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_VerifyHeader_Call) Return(_a0 bool, _a1 string) *MockUserService_VerifyHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_VerifyHeader_Call) RunAndReturn(run func(string) (bool, string)) *MockUserService_VerifyHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
