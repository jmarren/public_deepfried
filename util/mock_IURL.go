// Code generated by mockery v2.51.1. DO NOT EDIT.

package util

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// MockURL is an autogenerated mock type for the IURL type
type MockURL struct {
	mock.Mock
}

type MockURL_Expecter struct {
	mock *mock.Mock
}

func (_m *MockURL) EXPECT() *MockURL_Expecter {
	return &MockURL_Expecter{mock: &_m.Mock}
}

// EscapedFragment provides a mock function with no fields
func (_m *MockURL) EscapedFragment() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EscapedFragment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_EscapedFragment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EscapedFragment'
type MockURL_EscapedFragment_Call struct {
	*mock.Call
}

// EscapedFragment is a helper method to define mock.On call
func (_e *MockURL_Expecter) EscapedFragment() *MockURL_EscapedFragment_Call {
	return &MockURL_EscapedFragment_Call{Call: _e.mock.On("EscapedFragment")}
}

func (_c *MockURL_EscapedFragment_Call) Run(run func()) *MockURL_EscapedFragment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_EscapedFragment_Call) Return(_a0 string) *MockURL_EscapedFragment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_EscapedFragment_Call) RunAndReturn(run func() string) *MockURL_EscapedFragment_Call {
	_c.Call.Return(run)
	return _c
}

// EscapedPath provides a mock function with no fields
func (_m *MockURL) EscapedPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EscapedPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_EscapedPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EscapedPath'
type MockURL_EscapedPath_Call struct {
	*mock.Call
}

// EscapedPath is a helper method to define mock.On call
func (_e *MockURL_Expecter) EscapedPath() *MockURL_EscapedPath_Call {
	return &MockURL_EscapedPath_Call{Call: _e.mock.On("EscapedPath")}
}

func (_c *MockURL_EscapedPath_Call) Run(run func()) *MockURL_EscapedPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_EscapedPath_Call) Return(_a0 string) *MockURL_EscapedPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_EscapedPath_Call) RunAndReturn(run func() string) *MockURL_EscapedPath_Call {
	_c.Call.Return(run)
	return _c
}

// Hostname provides a mock function with no fields
func (_m *MockURL) Hostname() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostname")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_Hostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostname'
type MockURL_Hostname_Call struct {
	*mock.Call
}

// Hostname is a helper method to define mock.On call
func (_e *MockURL_Expecter) Hostname() *MockURL_Hostname_Call {
	return &MockURL_Hostname_Call{Call: _e.mock.On("Hostname")}
}

func (_c *MockURL_Hostname_Call) Run(run func()) *MockURL_Hostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_Hostname_Call) Return(_a0 string) *MockURL_Hostname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_Hostname_Call) RunAndReturn(run func() string) *MockURL_Hostname_Call {
	_c.Call.Return(run)
	return _c
}

// IsAbs provides a mock function with no fields
func (_m *MockURL) IsAbs() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAbs")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockURL_IsAbs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAbs'
type MockURL_IsAbs_Call struct {
	*mock.Call
}

// IsAbs is a helper method to define mock.On call
func (_e *MockURL_Expecter) IsAbs() *MockURL_IsAbs_Call {
	return &MockURL_IsAbs_Call{Call: _e.mock.On("IsAbs")}
}

func (_c *MockURL_IsAbs_Call) Run(run func()) *MockURL_IsAbs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_IsAbs_Call) Return(_a0 bool) *MockURL_IsAbs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_IsAbs_Call) RunAndReturn(run func() bool) *MockURL_IsAbs_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalBinary provides a mock function with no fields
func (_m *MockURL) MarshalBinary() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalBinary")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockURL_MarshalBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalBinary'
type MockURL_MarshalBinary_Call struct {
	*mock.Call
}

// MarshalBinary is a helper method to define mock.On call
func (_e *MockURL_Expecter) MarshalBinary() *MockURL_MarshalBinary_Call {
	return &MockURL_MarshalBinary_Call{Call: _e.mock.On("MarshalBinary")}
}

func (_c *MockURL_MarshalBinary_Call) Run(run func()) *MockURL_MarshalBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_MarshalBinary_Call) Return(text []byte, err error) *MockURL_MarshalBinary_Call {
	_c.Call.Return(text, err)
	return _c
}

func (_c *MockURL_MarshalBinary_Call) RunAndReturn(run func() ([]byte, error)) *MockURL_MarshalBinary_Call {
	_c.Call.Return(run)
	return _c
}

// Port provides a mock function with no fields
func (_m *MockURL) Port() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Port")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_Port_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Port'
type MockURL_Port_Call struct {
	*mock.Call
}

// Port is a helper method to define mock.On call
func (_e *MockURL_Expecter) Port() *MockURL_Port_Call {
	return &MockURL_Port_Call{Call: _e.mock.On("Port")}
}

func (_c *MockURL_Port_Call) Run(run func()) *MockURL_Port_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_Port_Call) Return(_a0 string) *MockURL_Port_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_Port_Call) RunAndReturn(run func() string) *MockURL_Port_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with no fields
func (_m *MockURL) Query() url.Values {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 url.Values
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	return r0
}

// MockURL_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockURL_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *MockURL_Expecter) Query() *MockURL_Query_Call {
	return &MockURL_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *MockURL_Query_Call) Run(run func()) *MockURL_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_Query_Call) Return(_a0 url.Values) *MockURL_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_Query_Call) RunAndReturn(run func() url.Values) *MockURL_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Redacted provides a mock function with no fields
func (_m *MockURL) Redacted() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Redacted")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_Redacted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redacted'
type MockURL_Redacted_Call struct {
	*mock.Call
}

// Redacted is a helper method to define mock.On call
func (_e *MockURL_Expecter) Redacted() *MockURL_Redacted_Call {
	return &MockURL_Redacted_Call{Call: _e.mock.On("Redacted")}
}

func (_c *MockURL_Redacted_Call) Run(run func()) *MockURL_Redacted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_Redacted_Call) Return(_a0 string) *MockURL_Redacted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_Redacted_Call) RunAndReturn(run func() string) *MockURL_Redacted_Call {
	_c.Call.Return(run)
	return _c
}

// RequestURI provides a mock function with no fields
func (_m *MockURL) RequestURI() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequestURI")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_RequestURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestURI'
type MockURL_RequestURI_Call struct {
	*mock.Call
}

// RequestURI is a helper method to define mock.On call
func (_e *MockURL_Expecter) RequestURI() *MockURL_RequestURI_Call {
	return &MockURL_RequestURI_Call{Call: _e.mock.On("RequestURI")}
}

func (_c *MockURL_RequestURI_Call) Run(run func()) *MockURL_RequestURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_RequestURI_Call) Return(_a0 string) *MockURL_RequestURI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_RequestURI_Call) RunAndReturn(run func() string) *MockURL_RequestURI_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockURL) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockURL_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockURL_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockURL_Expecter) String() *MockURL_String_Call {
	return &MockURL_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockURL_String_Call) Run(run func()) *MockURL_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockURL_String_Call) Return(_a0 string) *MockURL_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_String_Call) RunAndReturn(run func() string) *MockURL_String_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalBinary provides a mock function with given fields: text
func (_m *MockURL) UnmarshalBinary(text []byte) error {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockURL_UnmarshalBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalBinary'
type MockURL_UnmarshalBinary_Call struct {
	*mock.Call
}

// UnmarshalBinary is a helper method to define mock.On call
//   - text []byte
func (_e *MockURL_Expecter) UnmarshalBinary(text interface{}) *MockURL_UnmarshalBinary_Call {
	return &MockURL_UnmarshalBinary_Call{Call: _e.mock.On("UnmarshalBinary", text)}
}

func (_c *MockURL_UnmarshalBinary_Call) Run(run func(text []byte)) *MockURL_UnmarshalBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockURL_UnmarshalBinary_Call) Return(_a0 error) *MockURL_UnmarshalBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockURL_UnmarshalBinary_Call) RunAndReturn(run func([]byte) error) *MockURL_UnmarshalBinary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockURL creates a new instance of MockURL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockURL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockURL {
	mock := &MockURL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
