// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserFeed = `-- name: GetUserFeed :many
SELECT 
    playables.id, playables.user_id, playables.audio_src, playables.username, playables.title, playables.bpm, playables.playback_seconds, playables.created, playables.artwork_src,
    audio_file_tag_arrays.tag_array,
    audio_files.vis_arr,
    audio_files.usage_rights
FROM users
JOIN following
	ON following.following_id = users.id
JOIN playables
	ON following.following_id = playables.user_id
FULL JOIN audio_file_tag_arrays 
	ON playables.id = audio_file_tag_arrays.id  
JOIN audio_files 
	ON playables.id = audio_files.id
WHERE following.follower_id = $1
`

type GetUserFeedRow struct {
	Playable    Playable
	TagArray    []string
	VisArr      []int32
	UsageRights pgtype.Text
}

func (q *Queries) GetUserFeed(ctx context.Context, myID pgtype.UUID) ([]GetUserFeedRow, error) {
	rows, err := q.db.Query(ctx, getUserFeed, myID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedRow
	for rows.Next() {
		var i GetUserFeedRow
		if err := rows.Scan(
			&i.Playable.ID,
			&i.Playable.UserID,
			&i.Playable.AudioSrc,
			&i.Playable.Username,
			&i.Playable.Title,
			&i.Playable.Bpm,
			&i.Playable.PlaybackSeconds,
			&i.Playable.Created,
			&i.Playable.ArtworkSrc,
			&i.TagArray,
			&i.VisArr,
			&i.UsageRights,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
