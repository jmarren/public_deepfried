// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: featured_track.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFeaturedTrack = `-- name: GetFeaturedTrack :one
SELECT
    playables.id,
    playables.user_id,
    playables.audio_src,
    playables.username,
    title,
    bpm,
    playback_seconds,
    playables.created,
    playables.artwork_src
FROM playables
JOIN featured_track 
    ON featured_track.audio_file_id = playables.id
JOIN users 
    ON playables.user_id = users.id
LIMIT 1
`

func (q *Queries) GetFeaturedTrack(ctx context.Context) (Playable, error) {
	row := q.db.QueryRow(ctx, getFeaturedTrack)
	var i Playable
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AudioSrc,
		&i.Username,
		&i.Title,
		&i.Bpm,
		&i.PlaybackSeconds,
		&i.Created,
		&i.ArtworkSrc,
	)
	return i, err
}

const updateFeaturedTrack = `-- name: UpdateFeaturedTrack :exec
INSERT INTO featured_track (audio_file_id)
VALUES ($1)
ON CONFLICT (id) DO UPDATE
SET audio_file_id = $1
`

func (q *Queries) UpdateFeaturedTrack(ctx context.Context, audioFileID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateFeaturedTrack, audioFileID)
	return err
}
