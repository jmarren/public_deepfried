// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schema.sql

package sqlc

import (
	"context"
)

const initAudioFiles = `-- name: InitAudioFiles :exec
CREATE TABLE IF NOT EXISTS audio_files ( -- noqa
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    user_id UUID NOT NULL 
        REFERENCES users
        ON DELETE CASCADE,
    title VARCHAR(20) NOT NULL,
    audio_src VARCHAR(255) NOT NULL,
    bpm INT NOT NULL,
    musical_key MUSICAL_KEY NOT NULL,
    musical_key_signature MUSICAL_KEY_SIGNATURE NOT NULL,
    major_minor MAJOR_MINOR NOT NULL,
    playback_seconds INT NOT NULL,
    file_size INTEGER NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    listen_count INTEGER NOT NULL DEFAULT 0,
    download_count INTEGER NOT NULL DEFAULT 0,
    vis_arr INTEGER [] NOT NULL,
    usage_rights VARCHAR(255),
    artwork_src VARCHAR(255) NOT NULL,
    last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (user_id, title)
)
`

func (q *Queries) InitAudioFiles(ctx context.Context) error {
	_, err := q.db.Exec(ctx, initAudioFiles)
	return err
}

const initFeaturedSection = `-- name: InitFeaturedSection :exec
CREATE TABLE IF NOT EXISTS featured_track (
    id INT UNIQUE default(1),
    audio_file_id UUID NOT NULL 
        REFERENCES audio_files
        ON DELETE CASCADE,
    Constraint CHK_single_row CHECK (id = 1)
)
`

func (q *Queries) InitFeaturedSection(ctx context.Context) error {
	_, err := q.db.Exec(ctx, initFeaturedSection)
	return err
}

const initFollowing = `-- name: InitFollowing :exec


CREATE TABLE IF NOT EXISTS following (
    follower_id UUID NOT NULL 
        REFERENCES users
        ON DELETE CASCADE,
    following_id UUID NOT NULL 
    REFERENCES users
    ON DELETE CASCADE,
    PRIMARY KEY (follower_id, following_id)
)
`

// CREATE TABLE IF NOT EXISTS editors_picks (
//
//	id INT UNIQUE default(1),
//	audio_file_id UUID NOT NULL
//	    REFERENCES audio_files
//	    ON DELETE CASCADE,
//	Constraint CHK_fifteen_rows_or_less CHECK (id < 16)
//
// );
func (q *Queries) InitFollowing(ctx context.Context) error {
	_, err := q.db.Exec(ctx, initFollowing)
	return err
}

const initPins = `-- name: InitPins :exec
CREATE TABLE IF NOT EXISTS pins (
    id SERIAL PRIMARY KEY,
    file_id UUID NOT NULL 
        REFERENCES audio_files
        ON DELETE CASCADE,
    user_id UUID NOT NULL 
        REFERENCES users
        ON DELETE CASCADE,
    UNIQUE (user_id, file_id)
)
`

func (q *Queries) InitPins(ctx context.Context) error {
	_, err := q.db.Exec(ctx, initPins)
	return err
}

const initUsers = `-- name: InitUsers :exec


CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    cognito_id VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(20) UNIQUE NOT NULL
)
`

// CREATE EXTENSION IF NOT EXISTS "uuid-oosp";
func (q *Queries) InitUsers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, initUsers)
	return err
}
