// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: downloads.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserDownload = `-- name: AddUserDownload :exec
INSERT INTO user_downloads (user_id, audio_file_id)
VALUES ($1, $2)
`

type AddUserDownloadParams struct {
	UserID  pgtype.UUID
	AudioID pgtype.UUID
}

func (q *Queries) AddUserDownload(ctx context.Context, arg AddUserDownloadParams) error {
	_, err := q.db.Exec(ctx, addUserDownload, arg.UserID, arg.AudioID)
	return err
}

const getUserDownloads = `-- name: GetUserDownloads :many
SELECT 
    playables.id, playables.user_id, playables.audio_src, playables.username, playables.title, playables.bpm, playables.playback_seconds, playables.created, playables.artwork_src
FROM playables
JOIN user_downloads
    ON user_downloads.audio_file_id = playables.id
WHERE user_downloads.user_id = $1
LIMIT 40
`

func (q *Queries) GetUserDownloads(ctx context.Context, userID pgtype.UUID) ([]Playable, error) {
	rows, err := q.db.Query(ctx, getUserDownloads, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playable
	for rows.Next() {
		var i Playable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AudioSrc,
			&i.Username,
			&i.Title,
			&i.Bpm,
			&i.PlaybackSeconds,
			&i.Created,
			&i.ArtworkSrc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDownloadsWithKeyword = `-- name: GetUserDownloadsWithKeyword :many
SELECT 
    playables.id, playables.user_id, playables.audio_src, playables.username, playables.title, playables.bpm, playables.playback_seconds, playables.created, playables.artwork_src
FROM playables
JOIN user_downloads
    ON user_downloads.audio_file_id = playables.id
WHERE user_downloads.user_id = $1
ORDER BY ((similarity(playables.title, $2) ^ 2) + similarity(playables.username, $2)) DESC
LIMIT 40
`

type GetUserDownloadsWithKeywordParams struct {
	UserID  pgtype.UUID
	Keyword string
}

func (q *Queries) GetUserDownloadsWithKeyword(ctx context.Context, arg GetUserDownloadsWithKeywordParams) ([]Playable, error) {
	rows, err := q.db.Query(ctx, getUserDownloadsWithKeyword, arg.UserID, arg.Keyword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playable
	for rows.Next() {
		var i Playable
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AudioSrc,
			&i.Username,
			&i.Title,
			&i.Bpm,
			&i.PlaybackSeconds,
			&i.Created,
			&i.ArtworkSrc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
