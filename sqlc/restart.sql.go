// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: restart.sql

package sqlc

import (
	"context"
)

const getTypes = `-- name: GetTypes :many



CREATE TYPE MUSICAL_KEY AS ENUM ('C', 'D', 'E', 'F', 'G', 'A', 'B')
`

type GetTypesRow struct {
}

// DROP TABLE search_doc;
// DROP TABLE following;
// DROP TABLE featured_track;
// DROP TABLE pins;
// DROP TABLE audio_file_tags;
// DROP TABLE tags;
// DROP TABLE audio_files;
// DROP TABLE users;
//
// DROP TYPE IF EXISTS MUSICAL_KEY;
// DROP TYPE IF EXISTS MUSICAL_KEY_SIGNATURE;
// DROP TYPE IF EXISTS MAJOR_MINOR;
// SELECT *
// FROM pgtype;
func (q *Queries) GetTypes(ctx context.Context) ([]GetTypesRow, error) {
	rows, err := q.db.Query(ctx, getTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTypesRow
	for rows.Next() {
		var i GetTypesRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
