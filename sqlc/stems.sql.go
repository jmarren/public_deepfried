// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stems.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addStem = `-- name: AddStem :exec
INSERT INTO audio_file_stems (audio_file_id, stem_file_name)
VALUES ($1, $2)
`

type AddStemParams struct {
	AudioFileID  pgtype.UUID
	StemFileName string
}

func (q *Queries) AddStem(ctx context.Context, arg AddStemParams) error {
	_, err := q.db.Exec(ctx, addStem, arg.AudioFileID, arg.StemFileName)
	return err
}

const getNumberOfStemFiles = `-- name: GetNumberOfStemFiles :one
SELECT COUNT(*)
FROM audio_files
JOIN audio_file_stems
    ON audio_files.id = audio_file_stems.audio_file_id
WHERE audio_files.id = $1
`

func (q *Queries) GetNumberOfStemFiles(ctx context.Context, id pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfStemFiles, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getStems = `-- name: GetStems :many
SELECT stem_file_name
FROM audio_file_stems
WHERE audio_file_id = $1
`

func (q *Queries) GetStems(ctx context.Context, audioFileID pgtype.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getStems, audioFileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var stem_file_name string
		if err := rows.Scan(&stem_file_name); err != nil {
			return nil, err
		}
		items = append(items, stem_file_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
