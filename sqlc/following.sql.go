// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: following.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFollowNotification = `-- name: AddFollowNotification :exec
INSERT INTO follow_notifications (
    user_id,
    new_follower_id
)
VALUES (
    (SELECT 
        id
    FROM users
    WHERE username = $1
    ),
    $2
)
`

type AddFollowNotificationParams struct {
	TheirUsername string
	MyID          pgtype.UUID
}

func (q *Queries) AddFollowNotification(ctx context.Context, arg AddFollowNotificationParams) error {
	_, err := q.db.Exec(ctx, addFollowNotification, arg.TheirUsername, arg.MyID)
	return err
}

const followUser = `-- name: FollowUser :exec
INSERT INTO following (following_id, follower_id) 
VALUES ($1, $2)
`

type FollowUserParams struct {
	TheirID pgtype.UUID
	MyID    pgtype.UUID
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.db.Exec(ctx, followUser, arg.TheirID, arg.MyID)
	return err
}

const followUsername = `-- name: FollowUsername :exec
INSERT INTO following (following_id, follower_id)
VALUES (
    (
    SELECT id
    FROM users
    WHERE username = $1
    ), $2)
`

type FollowUsernameParams struct {
	TheirUsername string
	MyID          pgtype.UUID
}

func (q *Queries) FollowUsername(ctx context.Context, arg FollowUsernameParams) error {
	_, err := q.db.Exec(ctx, followUsername, arg.TheirUsername, arg.MyID)
	return err
}

const getFollowNotifications = `-- name: GetFollowNotifications :many
SELECT 
    users.id, users.cognito_id, users.username
FROM follow_notifications
JOIN users
    ON follow_notifications.new_follower_id = users.id
WHERE follow_notifications.user_id = $1
`

func (q *Queries) GetFollowNotifications(ctx context.Context, myID pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getFollowNotifications, myID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CognitoID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowers = `-- name: GetFollowers :many
SELECT 
    users.id, users.cognito_id, users.username
FROM following
JOIN users
ON following.follower_id = users.id
WHERE following.following_id = (
	SELECT id
	FROM users
	WHERE users.username = $1
)
`

func (q *Queries) GetFollowers(ctx context.Context, followingUsername string) ([]User, error) {
	rows, err := q.db.Query(ctx, getFollowers, followingUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CognitoID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT 
    users.id, users.cognito_id, users.username
FROM following
JOIN users
ON following.following_id = users.id
WHERE  following.follower_id = (
	SELECT id
	FROM users
	WHERE users.username = $1
)
`

func (q *Queries) GetFollowing(ctx context.Context, followerUsername string) ([]User, error) {
	rows, err := q.db.Query(ctx, getFollowing, followerUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CognitoID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserFollowingUser = `-- name: IsUserFollowingUser :one
SELECT COUNT(*)
FROM following
WHERE follower_id = $1 AND following_id = $2
`

type IsUserFollowingUserParams struct {
	FollowerID  pgtype.UUID
	FollowingID pgtype.UUID
}

func (q *Queries) IsUserFollowingUser(ctx context.Context, arg IsUserFollowingUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, isUserFollowingUser, arg.FollowerID, arg.FollowingID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const markAllFollowNotificationSeen = `-- name: MarkAllFollowNotificationSeen :exec


UPDATE follow_notifications
SET seen = TRUE
WHERE user_id = $1
`

// DELETE FROM follow_notifications
func (q *Queries) MarkAllFollowNotificationSeen(ctx context.Context, myID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markAllFollowNotificationSeen, myID)
	return err
}

const testFollowUser = `-- name: TestFollowUser :exec
INSERT INTO following (following_id, follower_id) 
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type TestFollowUserParams struct {
	FollowingID pgtype.UUID
	FollowerID  pgtype.UUID
}

func (q *Queries) TestFollowUser(ctx context.Context, arg TestFollowUserParams) error {
	_, err := q.db.Exec(ctx, testFollowUser, arg.FollowingID, arg.FollowerID)
	return err
}

const unFollowUsername = `-- name: UnFollowUsername :exec
WITH their_id AS (
    SELECT id
    FROM users
    WHERE username = $2
),
delete_notification AS (
    DELETE FROM follow_notifications
    WHERE new_follower_id = $1 
          AND user_id = (SELECT id FROM their_id)
)
DELETE FROM following 
WHERE  following_id = (SELECT id FROM their_id)
       AND follower_id = $1
`

type UnFollowUsernameParams struct {
	MyID          pgtype.UUID
	TheirUsername string
}

func (q *Queries) UnFollowUsername(ctx context.Context, arg UnFollowUsernameParams) error {
	_, err := q.db.Exec(ctx, unFollowUsername, arg.MyID, arg.TheirUsername)
	return err
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM following
WHERE follower_id = $1 AND following_id = $2
`

type UnfollowUserParams struct {
	FollowerID  pgtype.UUID
	FollowingID pgtype.UUID
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.Exec(ctx, unfollowUser, arg.FollowerID, arg.FollowingID)
	return err
}
