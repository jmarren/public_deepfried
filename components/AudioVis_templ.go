// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AudioVis(data *[]int32, id string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<canvas class=\"audio-vis\" hx-audio-vis=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(id)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/AudioVis.templ`, Line: 4, Col: 44}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" audio-vis-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.JSONString(*data))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/AudioVis.templ`, Line: 4, Col: 87}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></canvas>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var AudioVisOnceHandle = templ.NewOnceHandle()

func AudioVisHead() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style id=\"audio-vis-styles\">\n .search-results-row .audio-vis {\n    width: 300px;\n    min-width: 300px;\n    height: 50px;\n  }\n\n  #track-page #header-section .audio-vis {\n    width: 500px;\n    min-width: 500px;\n    height: 75px;\n  }\n\n</style> <script id=\"audio-vis-script\" defer>\n\n  function fillCanvasBar(elt, i, color, data) {\n      const max = Math.max(...(data))\n      const barwidth = (elt.scrollWidth / data.length) / 2\n      const bargap = (elt.scrollWidth / data.length) / 2\n      const rect = elt.getBoundingClientRect();\n      const ctx = elt.getContext(\"2d\")\n      ctx.fillStyle = color;\n      const barheight = rect.height * (data[i] / max)\n      const x = i * (barwidth + bargap);\n      const y = (rect.height / 2) - (barheight) / 2\n      ctx.clearRect(x - bargap / 2, 0, barwidth + bargap, rect.height)\n      ctx.fillRect(x, y, barwidth, barheight)\n  }\n\n  function addVis(canvas) {\n    const ctx = canvas.getContext(\"2d\")\n    const data = JSON.parse(canvas.getAttribute(\"audio-vis-data\"))\n    const barwidth = (canvas.scrollWidth / data.length) / 2\n    const bargap = (canvas.scrollWidth / data.length) / 2 \n\n    const dpr = window.devicePixelRatio;\n    const rect = canvas.getBoundingClientRect();\n    const max = Math.max(...(data))\n\n    // Set the \"actual\" size of the canvas\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n\n    // Scale the context to ensure correct drawing operations\n    ctx.scale(dpr, dpr);\n\n    function fillBar(i, color) {\n      ctx.fillStyle = color;\n      const barheight = rect.height * (data[i] / max)\n      const x = i * (barwidth + bargap);\n      const y = (rect.height / 2) - (barheight) / 2\n      ctx.clearRect(x - bargap / 2, 0, barwidth + bargap, rect.height)\n      ctx.fillRect(x, y, barwidth, barheight)\n    }\n\n    function fillBars(color, divisor) {\n      ctx.fillStyle = color\n      for (let i = 0; i < data.length; i++) {\n        barheight = rect.height * (data[i] / max) / divisor\n        ctx.fillRect(i * (barwidth + bargap), (rect.height / 2) - barheight / 2, barwidth, barheight)\n      }\n    }\n    fillBars(\"white\", 1);\n\n    const statusArr = new Array(data.length).fill(false)\n    \n  canvas.timeUpdate = () => {\n\n      const progress = audio.currentTime / audio.duration\n      const index = data.length * progress\n\n      for (let i = 0; i < statusArr.length; i++) {\n        if (statusArr[i] == false && i <= index) {\n          fillBar(i, \"#898b8f\")\n          statusArr[i] = true;\n        } else if (statusArr[i] == true && i > index) {\n          fillBar(i, \"white\")\n          statusArr[i] = false;\n        }\n      }\n    }\n\n  canvas.onEnd = () => {\n      for (let i = 0; i < data.length; i++) {\n        fillBar(i, \"white\")\n      }\n    }\n  }\n\n    // canvas.addEventListener('mousemove', function (e) {\n    //   canvasX = e.offsetX\n    //   canvasY = e.offsetY\n    //   const index = Math.floor(canvasX / (barwidth + bargap))\n    //\n    //   for (let i = 0; i < statusArr.length; i++) {\n    //     if (statusArr[i] == false && i <= index) {\n    //       fillBar(i, \"darkgreen\")\n    //       statusArr[i] = true;\n    //     } else if (statusArr[i] == true && i > index) {\n    //       fillBar(i, \"limegreen\")\n    //       statusArr[i] = false;\n    //     }\n    //   }\n    // })\n\n  window.addEventListener(\"popstate\", (e) => {\n    const canvases = document.querySelectorAll(\".audio-vis\");\n    canvases.forEach((el) => {\n      addVis(el);\n      el.visLoaded = true;\n    })\n  })\n\n  window.onload = () => {\n    const canvases = document.querySelectorAll(\".audio-vis\");\n    canvases.forEach((el) => {\n      addVis(el);\n      el.visLoaded = true;\n    })\n  }\n\n  window.addEventListener(\"htmx:historyRestore\", (e) => {\n    // console.log(\"history restore event\")\n    const canvases = document.querySelectorAll(\".audio-vis\");\n    canvases.forEach((el) => {\n      addVis(el);\n      el.visLoaded = true;\n    })\n  })\n  window.addEventListener(\"htmx:afterSettle\", (e) => {\n    const newElt = e.detail.elt\n    newCanvases = newElt.querySelectorAll(\"canvas.audio-vis\")\n    newCanvases.forEach((el) => {\n      if (!el.visLoaded) {\n        addVis(el);\n      }\n      el.visLoaded = true\n    })\n  })\n</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = AudioVisOnceHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
