// Code generated by mockery v2.51.1. DO NOT EDIT.

package util

import mock "github.com/stretchr/testify/mock"

// MockIValues is an autogenerated mock type for the IValues type
type MockIValues struct {
	mock.Mock
}

type MockIValues_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIValues) EXPECT() *MockIValues_Expecter {
	return &MockIValues_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, value
func (_m *MockIValues) Add(key string, value string) {
	_m.Called(key, value)
}

// MockIValues_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockIValues_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockIValues_Expecter) Add(key interface{}, value interface{}) *MockIValues_Add_Call {
	return &MockIValues_Add_Call{Call: _e.mock.On("Add", key, value)}
}

func (_c *MockIValues_Add_Call) Run(run func(key string, value string)) *MockIValues_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIValues_Add_Call) Return() *MockIValues_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIValues_Add_Call) RunAndReturn(run func(string, string)) *MockIValues_Add_Call {
	_c.Run(run)
	return _c
}

// Del provides a mock function with given fields: key
func (_m *MockIValues) Del(key string) {
	_m.Called(key)
}

// MockIValues_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockIValues_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *MockIValues_Expecter) Del(key interface{}) *MockIValues_Del_Call {
	return &MockIValues_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockIValues_Del_Call) Run(run func(key string)) *MockIValues_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIValues_Del_Call) Return() *MockIValues_Del_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIValues_Del_Call) RunAndReturn(run func(string)) *MockIValues_Del_Call {
	_c.Run(run)
	return _c
}

// Encode provides a mock function with no fields
func (_m *MockIValues) Encode() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIValues_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockIValues_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
func (_e *MockIValues_Expecter) Encode() *MockIValues_Encode_Call {
	return &MockIValues_Encode_Call{Call: _e.mock.On("Encode")}
}

func (_c *MockIValues_Encode_Call) Run(run func()) *MockIValues_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIValues_Encode_Call) Return(_a0 string) *MockIValues_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValues_Encode_Call) RunAndReturn(run func() string) *MockIValues_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockIValues) Get(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIValues_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIValues_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockIValues_Expecter) Get(key interface{}) *MockIValues_Get_Call {
	return &MockIValues_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockIValues_Get_Call) Run(run func(key string)) *MockIValues_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIValues_Get_Call) Return(_a0 string) *MockIValues_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValues_Get_Call) RunAndReturn(run func(string) string) *MockIValues_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *MockIValues) Has(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIValues_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockIValues_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key string
func (_e *MockIValues_Expecter) Has(key interface{}) *MockIValues_Has_Call {
	return &MockIValues_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *MockIValues_Has_Call) Run(run func(key string)) *MockIValues_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIValues_Has_Call) Return(_a0 bool) *MockIValues_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValues_Has_Call) RunAndReturn(run func(string) bool) *MockIValues_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockIValues) Set(key string, value string) {
	_m.Called(key, value)
}

// MockIValues_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockIValues_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockIValues_Expecter) Set(key interface{}, value interface{}) *MockIValues_Set_Call {
	return &MockIValues_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockIValues_Set_Call) Run(run func(key string, value string)) *MockIValues_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIValues_Set_Call) Return() *MockIValues_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIValues_Set_Call) RunAndReturn(run func(string, string)) *MockIValues_Set_Call {
	_c.Run(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockIValues) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIValues_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockIValues_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockIValues_Expecter) String() *MockIValues_String_Call {
	return &MockIValues_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockIValues_String_Call) Run(run func()) *MockIValues_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIValues_String_Call) Return(_a0 string) *MockIValues_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIValues_String_Call) RunAndReturn(run func() string) *MockIValues_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIValues creates a new instance of MockIValues. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIValues(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIValues {
	mock := &MockIValues{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
